#!/usr/bin/python3
# -*- encoding: utf8 -*-
#
# Read strings from stdin and error out on binary data.
# Useful to sanitize untrusted potential binary data for bash.
#
#
# Copyright (C) 2021  David Hobach  LGPLv3
# 0.3
#
#

import io
import sys
import argparse
import locale


class LimitingTextIOWrapper(io.TextIOWrapper):
    ''' A TextIOWrapper with a limit on chars to read per line. '''

    def __init__(self, *args, limit=-1, limit_marker="\n\n", **kwargs):
        self._limit = limit
        self._accept = True
        self.limit_marker = limit_marker
        super().__init__(*args, **kwargs)

    def readline(self, size=-1):
        read = super().readline(self._limit)
        if not read: #EOF
            return read

        if self._accept:
            self._accept = (read[-1] == "\n")
            if self._accept:
                return read
            return read + "\n" #make sure each line ends with a newline char
        self._accept = (read[-1] == "\n")
        return self.limit_marker

def parse_args():
    parser = argparse.ArgumentParser(description="Attempt to decode string data from stdin.")
    parser.add_argument("--encoding", help="String encoding to use (default: locale encoding).")
    parser.add_argument("-l", help="Maximum number of bytes to read per line (default: -1/infinite). \
                        Ignore additional bytes. Useful to avoid memory DoS for untrusted input.",
                        default=-1, type=int)
    return parser.parse_args()

def main():
    args = parse_args()
    encoding = args.encoding
    if not encoding:
        _, encoding = locale.getlocale()

    try:
        istream = LimitingTextIOWrapper(sys.stdin.buffer, encoding=encoding, limit=args.l)
    except LookupError as e:
        print(e, file=sys.stderr)
        return 6

    for line in istream:
        if line == istream.limit_marker:
            continue
        print(line, flush=True, end="")

    return 0

if __name__ == "__main__":
    sys.exit(main())
