#!/bin/bash
#
#+Functions for data type checks and conversions.
#+
#+Copyright (C) 2018  David Hobach  LGPLv3
#+0.2

b_deps "mktemp" "mkfifo" "rm" "wc" "strings" "tee" "head"

#+### Global Variables ###

#+B_TYPES_ENCODINGS
#+Global map for human readable string encodings which can be used for [b_types_parseString](#b_typesParseString).
#+Currently supported values: 7-bit|8-bit|16-bit-bigendian|16-bit-littleendian|32-bit-bigendian|32-bit-littleendian
#+See the strings manpage for further explanations.
declare -gA B_TYPES_ENCODINGS=(
	["7-bit"]="s"
	["8-bit"]="S"
	["16-bit-bigendian"]="b"
	["16-bit-littleendian"]="l"
	["32-bit-bigendian"]="B"
	["32-bit-littleendian"]="L"
	)

#+### Functions ###

#+b_types_parseString [encoding]
#+Checks whether whatever is lying in stdin is a string (and not binary) and if so, prints it to stdout.
#+
#+**Important**:
#+
#+ * bash has major issues whenever binary data is involved. For example equality checks may return undefined results. So whenever you are unsure as to whether a variable is a string or not, better pass it thorugh this function.
#+ * The input is taken from *stdin* rather than as parameter as binary parameters may also cause issues (special bytes etc.).
#+ * Even builtins such as `echo` do not necessarily play well with binary data. So it is recommended to pipe binary data through this function before further processing.
#+
#+Examples:
#+```bash
#+ #check a file
#+ b_types_parseString < "/path/to/potential/binary" > /dev/null && echo "It is a string file." || echo "It is a binary file."
#+
#+ #read parts of a file as string
#+ str="$(dd if="/path/to/another/file" bs=1 skip=8 | b_types_parseString)"
#+ [ $? -eq 0 ] && echo "Found the following string: $str"
#+```
#+
#+[encoding]: The encoding of the string lying in stdin. Use [B_TYPES_ENCODINGS](#B_TYPES_ENCODINGS) for this parameter. Defaults to ${B_TYPES_ENCODINGS["7-bit"]}, which makes sense in 99% of all cases as scripts should use ASCII only anyway (when no user-interaction is involved) in order to remain portable. Keep in mind that bash also needs to support the target encoding in order to support further processing.
#+returns: The data as String, if the input data was found to be a String. If no String was found to be lying in stdin, the output is an undefined string and a non-zero exit code is set. [B_E](#B_E) is only called on exceptional errors.
#+@B_E
function b_types_parseString {
local encoding="${1:-${B_TYPES_ENCODINGS["7-bit"]}}"

#create temporary pipes
local tdir=""
local ret=5
tdir="$(mktemp -d)" || { B_ERR="Failed to create a temporary directory." ; B_E }
local preStrPipe="$tdir/prestr"
local postStrPipe="$tdir/poststr"
local resultsPipe="$tdir/results"
mkfifo "$preStrPipe" || { B_ERR="Failed to create a pipe." ; B_E }
mkfifo "$postStrPipe" || { B_ERR="Failed to create a pipe." ; B_E }
mkfifo "$resultsPipe" || { B_ERR="Failed to create a pipe." ; B_E }

#start counting on results pipe
#NOTE: strings adds a newline as separator between strings --> we'll have to remove the last line
( set +o pipefail; head -n-1 | tee >(wc -c > "$postStrPipe") ) < "$resultsPipe" &
local pid=$!

#use strings to remove any binary data
tee >(wc -c > "$preStrPipe") >(strings -n1 -a -w -e "$encoding" > "$resultsPipe") &> /dev/null
[ $? -ne 0 ] && B_ERR="Failed to parse the String." && B_E

#read pre & post byte counts
#NOTE: we open the pipes in r/w as otherwise the -t option has no effect (hangs forever)
local preByteCnt=-1
local postByteCnt=-2
read -t "0.2" -r preByteCnt <> "$preStrPipe" || { B_ERR="Failed to read from a pipe - timeout." ; B_E }
read -t "0.2" -r postByteCnt <> "$postStrPipe" || { B_ERR="Failed to read from a pipe - timeout." ; B_E }
wait $pid
[ $? -ne 0 ] && B_ERR="Failed to parse the String: Count process failure." && B_E

#cleanup
rm -rf "$tdir" &> /dev/null

#set return value
[ $preByteCnt -gt 0 ] && [ $preByteCnt -eq $postByteCnt ]
}

#+b_types_isInteger [string]
#+Check whether the given String is an integer (positive or negative) or not.
#+[string]: The string to check. If it may be binary data, please make sure to pass it through [b_types_parseString](#b_types_parseString) first.
#+returns: Nothing, but sets a zero exit code if and only if the given string represents an integer.
function b_types_isInteger {
printf "%d" "$1" &> /dev/null
}
