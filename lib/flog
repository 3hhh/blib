#!/bin/bash
#
#+Flexible log writer for bash.
#+
#+Features:
#+ - arbitrary output support (files, network streams, stdout, stderr, ...) in a user-defined format
#+ - optional log file reduction
#+ - optional thread safety
#+ - support for partial messages
#+
#+In order to log to the system log, please use the logger command instead. This library is mostly meant for application logs handled in a more custom manner.
#+
#+Exact format of log entries:
#+
#+     [header][message]
#+     [header]: Can be arbitrarily defined in the 
#+               respective callback function. If nothing
#+               is defined, the below default header
#+               is used:
#+     [default header] = '[default date] '
#+     [default date]: current date in the format as used
#+               by date +"%F %T %Z" (the format can be changed)
#+
#+Copyright (C) 2020  David Hobach  LGPLv3
#+0.6

b_import "fs"
b_import "hash"
b_import "multithreading/mtx"
b_deps "date" "tail" "cat" "mktemp" "rm" "mkdir" "readlink"


#set all internal variables to their defaults
#blib_flog_reset
#resets all internal variables to their initial values
function blib_flog_reset {
#storage for the b_flog_init, get & set parameters
BLIB_STORE["BLIB_FLOG_FILENAME"]=""
BLIB_STORE["BLIB_FLOG_HEADER_FUNCTION"]="not initialized"
BLIB_STORE["BLIB_FLOG_LOG_LINES_LB"]=""
BLIB_STORE["BLIB_FLOG_LOG_LINES_UB"]=""
BLIB_STORE["BLIB_FLOG_DATE_FORMAT"]="%F %T %Z"
BLIB_STORE["BLIB_FLOG_THREAD_SAFE"]=""
BLIB_STORE["BLIB_FLOG_INTERMEDIATE"]=""
BLIB_STORE["BLIB_FLOG_MTX_DIR"]="/tmp/blib-flog-mtx"
BLIB_STORE["BLIB_FLOG_ID"]=""
BLIB_STORE["BLIB_FLOG_INIT_DONE"]=1

#the used file descriptor
BLIB_STORE["BLIB_FLOG_FD"]=""
}
blib_flog_reset

#+### Global Variables ###

#+B_FLOG_SEV
#+Global map for human readable severities which may be used by users of this script.
#+It was inspired by the severities of RFC5424.
#+Currently supported values: emergency|alert|critical|crit|error|err|warning|warn|notice|informational|info|debug
declare -gA B_FLOG_SEV=(
	["emergency"]=0
	["alert"]=1
	["critical"]=2
	["crit"]=2
	["error"]=3
	["err"]=3
	["warning"]=4
	["warn"]=4
	["notice"]=5
	["informational"]=6
	["info"]=6
	["debug"]=7
	)

#BLIB_FLOG_SEV2NAME
#Maps the integers back to the names used within the log.
declare -gA BLIB_FLOG_SEV2NAME=(
	[0]="EMERGENCY"
	[1]="ALERT"
	[2]="CRIT"
	[3]="ERR"
	[4]="WARN"
	[5]="NOTICE"
	[6]="INFO"
	[7]="DEBUG"
	)

#+### Functions ###

#+b_flog_printSeverity [severity]
#+[severity]: see [b_flog_init](#b_flog_init)
#+Print the given severity in a way for logging. This function is meant to be used as building block for header functions.
#+returns: a printed version of the given severity for logging
function b_flog_printSeverity {
local severity="${1:-6}"
[[ "${BLIB_FLOG_SEV2NAME["$severity"]+exists}" == "exists" ]] && severity="${BLIB_FLOG_SEV2NAME["$severity"]}"
echo -n "$severity"
}

#+b_flog_close
#+close the currently open log; is automatically called, but users may want to call it themselves to force the respective file descriptor to be closed before the program is ended
#+returns: nothing
#+@StateChanging
function b_flog_close {
#close the file descriptor
[ -n "${BLIB_STORE["BLIB_FLOG_FD"]}" ] && exec {BLIB_STORE["BLIB_FLOG_FD"]}>&-
blib_flog_reset
return 0
}

#+b_flog_init [log file name] [header callback function] [log reduction lines] [thread safe] [intermediate]
#+Initialize this log writer. This function **must** be called before any others.
#+[log file name]: name of the log file to write to; special files such as /dev/stdout, /dev/stderr (default), /dev/tcp, /dev/udp are supported if your bash version supports them; the file doesn't need to exist
#+[header callback function]: optional name of the function to be called whenever a new log entry is generated; the function must be defined as follows:
#+
#+     [header callback function] [severity]
#+     [severity]: see [b_flog_log](#b_flog_log)
#+     returns: the full header meant to be used for the current moment in time
#+              with the given severity (without knowing the message details)
#+              and sets a non-zero exit code on errors; errors may cause the
#+              message to be logged without header
#+
#+[log reduction lines]: if set to a positive integer, reduce the log file approximately to that number of lines during logging (default: 3000) - see b_flog_setLogReductionLinesApprox for details; this option has no effect on non-file outputs (stdout, network output, ...)
#+[thread safe]: Whether calls to [b_flog_log](#b_flog_log) should be thread safe (0) or not (default: 1 = not thread safe).
#+[intermediate]: String to use as intermediate separator when chaining partial log messages (default: [b_getDefaultMessageHandlerIntermediate](#b_getDefaultMessageHandlerIntermediate)).
#+returns: sets a non-zero exit code on errors and may exit the script
#+@StateChanging
#+@B_E
function b_flog_init {
#close previously used file
b_flog_close

#start init
BLIB_STORE["BLIB_FLOG_INIT_DONE"]=1
BLIB_STORE["BLIB_FLOG_FILENAME"]="${1:-/dev/stderr}"
b_flog_setHeaderFunction "${2:-b_flog_defaultHeader}"
b_flog_setLogReductionLinesApprox "${3:-3000}"
BLIB_STORE["BLIB_FLOG_THREAD_SAFE"]="${4:-1}"
BLIB_STORE["BLIB_FLOG_INTERMEDIATE"]="${5:-$(b_getDefaultMessageHandlerIntermediate)}"

#generate ID (exactly one ID per output must be generated)
local path="$(readlink -m "${BLIB_STORE["BLIB_FLOG_FILENAME"]}")"
BLIB_STORE["BLIB_FLOG_ID"]="$(b_hash_md5Str "$path")" || { B_ERR="Failed to obtain the md5 sum for $path." ; B_E }

#create the mutex directory, if needed
if [ ${BLIB_STORE["BLIB_FLOG_THREAD_SAFE"]} -eq 0 ] ; then
	mkdir -p "${BLIB_STORE["BLIB_FLOG_MTX_DIR"]}" || { B_ERR="Failed to create ${BLIBBLIB_STORE["BLIB_FLOG_MTX_DIR"]}." ; B_E }
fi

#create the output file, if needed
if [[ "${BLIB_STORE["BLIB_FLOG_FILENAME"]}" != "/dev/"* ]] ; then
	[[ "${BLIB_STORE["BLIB_FLOG_FILENAME"]}" != *"/"* ]] && B_ERR="Unexpected file name without slashes: ${BLIB_STORE["BLIB_FLOG_FILENAME"]}" && B_E
	mkdir -p "${BLIB_STORE["BLIB_FLOG_FILENAME"]%/*}" || { B_ERR="Failed to create the parent directories of ${BLIB_STORE["BLIB_FLOG_FILENAME"]}." ; B_E }
	[ ! -e "${BLIB_STORE["BLIB_FLOG_FILENAME"]}" ] && > "${BLIB_STORE["BLIB_FLOG_FILENAME"]}"
fi

#open the output for appending, let bash choose the file descriptor
exec {BLIB_STORE["BLIB_FLOG_FD"]}>>"${BLIB_STORE["BLIB_FLOG_FILENAME"]}" || { B_ERR="Failed to open the log output ${BLIB_STORE["BLIB_FLOG_FILENAME"]}." ; B_E }

#set the init done flag
BLIB_STORE["BLIB_FLOG_INIT_DONE"]=0
}

#blib_flog_reduceLog
#Reduce the log if and when it makes sense.
#returns: sets a non-zero exit code on errors and may exit the script
#@B_E
function blib_flog_reduceLog {
#do we need to reduce?
#NOTE: [ -f "${BLIB_STORE["BLIB_FLOG_FILENAME"]}" ] may return true if e.g. stdout is redirected to a file --> we use the filename (but check later anyway to make sure it is not something totally strange)
if  [[ "${BLIB_STORE["BLIB_FLOG_FILENAME"]}" != "/dev/"* ]] && [ ${BLIB_STORE["BLIB_FLOG_LOG_LINES_UB"]} -gt 0 ] && [ ${BLIB_STORE["BLIB_FLOG_LOG_LINES_LB"]} -ge 0 ] ; then
	local rnd=0
	#only check for reduction every 20 calls on average (we must not use any state for that)
	#we don't do that during testing to get deterministic logs
	[ $B_TEST_MODE -ne 0 ] && rnd=$(( $RANDOM % 50 ))

	if [ $rnd -eq 0 ] ; then
		local cnt=""
		local log="${BLIB_STORE["BLIB_FLOG_FILENAME"]}"

		#make sure it's not something strange
		[ ! -f "$log" ] && return 0

		#count lines
		cnt="$(b_fs_getLineCount "$log")" || { B_ERR="Failed to count the number of lines of ${log}." ; B_E }
		
		#reduce if necessary
		if [ $cnt -gt ${BLIB_STORE["BLIB_FLOG_LOG_LINES_UB"]} ] ; then
			local tmp=""
			tmp="$(mktemp)" || { B_ERR="Failed to create a temp file." ; B_E }
			tail -n ${BLIB_STORE["BLIB_FLOG_LOG_LINES_LB"]} "$log" > "$tmp" || { B_ERR="Failed to reduce the log $log." ; B_E }
			cat "$tmp" > "$log" || { B_ERR="Failed to write the reduced log back." ; B_E }
			rm -f "$tmp" &> /dev/null
			b_flog_log "Reduced the log to its last ${BLIB_STORE["BLIB_FLOG_LOG_LINES_LB"]} lines." || B_E
		fi
	fi
fi

return 0
}

#+b_flog_log [message] [severity] [first part] [last part]
#+Log the given message with the given optional severity.
#+If the \[thread safe\] variant [was chosen](#b_flog_init), may wait for other log sources to write their message first.
#+[message]: message to log
#+[severity]: users may pass arbitrary numbers or even Strings here, but it is recommended to stick to the priorities defined in $BLIB_FLOG_SEV (default: ${B_FLOG_SEV\["info"\]})
#+[first part]: If set to 0, assume that the given message is the first part of an overall chain of messages (default: 0).
#+[last part]: If set to 0, assume that the given message is the final part of an overall chain of messages (default: 0). Please note that other threads may be blocked from writing to the output, if the last message of a chain was not yet received.
#+returns: Sets a non-zero exit code on errors. [B_E](#B_E) is only called, if logging failed entirely.
#+@B_E
function b_flog_log {
#IMPORTANT: this function MUST NOT write any state in order to be usable by subshells
local msg="$1"
local sev="${2:-${B_FLOG_SEV["info"]}}"
local first="${3:-0}"
local last="${4:-0}"
local prefix=""
local ret=0

[ ${BLIB_STORE["BLIB_FLOG_INIT_DONE"]} -ne 0 ] && B_ERR="Calling b_flog_log without init is not supported." && B_E

if [ $first -eq 0 ] ; then
	if [ -n "$msg" ] ; then
		#obtain prefix via the header function
		prefix="$(${BLIB_STORE["BLIB_FLOG_HEADER_FUNCTION"]} "$sev")"
		if [ $? -ne 0 ] ; then
			prefix="$(b_flog_defaultHeader "$sev")"
			msg="The header function ${BLIB_STORE["BLIB_FLOG_HEADER_FUNCTION"]} returned an error. Thus fell back to the default header. Message: $msg"
			ret=1
		fi
	fi
else
	prefix="${BLIB_STORE["BLIB_FLOG_INTERMEDIATE"]}"
fi

local suffix=""
if [ $last -eq 0 ] ; then
	suffix=$'\n'
	[ -z "$msg" ] && prefix=""
fi

#obtain mutex, if necessary
local mtx="${BLIB_STORE["BLIB_FLOG_MTX_DIR"]}/${BLIB_STORE["BLIB_FLOG_ID"]}"
if [ ${BLIB_STORE["BLIB_FLOG_THREAD_SAFE"]} -eq 0 ] ; then
	b_mtx_waitFor "$mtx" "$BASHPID" 0 -1 > /dev/null || { B_ERR="Failed to obtain the log file mutex." ; B_E }
fi

#write
printf '%s%s%s' "$prefix" "$msg" "$suffix" >&${BLIB_STORE["BLIB_FLOG_FD"]}
if [ $? -ne 0 ] ; then
	#release mutex, if necessary (since we're in an error situation, we do it even if it wasn't the last message)
	[ ${BLIB_STORE["BLIB_FLOG_THREAD_SAFE"]} -eq 0 ] && b_mtx_release "$mtx" "$BASHPID"
	B_ERR="Failed to write to the log output at ${BLIB_STORE["BLIB_FLOG_FILENAME"]}."
	B_E
fi

#log reduction
b_setBE 1
blib_flog_reduceLog

#release mutex when the last message part was printed
[ ${BLIB_STORE["BLIB_FLOG_THREAD_SAFE"]} -eq 0 ] && [ $last -eq 0 ] && b_mtx_release "$mtx" "$BASHPID"
b_resetErrorHandler
B_E

return $ret
}

#blib_flog_nopErrorHandler
function blib_flog_nopErrorHandler {
	return 1
}

#+b_flog_messageHandler [message type] [message] [first part] [last part]
#+A [message handler](#b_defaultMessageHandler) implementation that handles messages by logging them via [b_flog_log](#b_flog_log).
#+Issues with the logging system itself (e.g. log file not writable) are written to stderr.
#+If you don't want to log all messages and/or handle some of them differently, you can simply write a wrapper for this function.
#+[message type]: See [b_defaultMessageHandler](#b_defaultMessageHandler).
#+[message]: See [b_defaultMessageHandler](#b_defaultMessageHandler).
#+[first part]: See [b_defaultMessageHandler](#b_defaultMessageHandler).
#+[last part]: See [b_defaultMessageHandler](#b_defaultMessageHandler).
#+returns: Nothing. Never causes errors.
function b_flog_messageHandler {
local mtype="$1"
local msg="$2"
local first="${3:-0}"
local last="${4:-0}"

local sev=${B_FLOG_SEV["error"]}
[ $mtype -eq 0 ] && sev=${B_FLOG_SEV["info"]}

local ret=
#NOTE: we cannot use the b_defaultErrorHandler as that will call b_error, which will then call us again and so on...
b_setErrorHandler "blib_flog_nopErrorHandler"
b_flog_log "$msg" "$sev" "$first" "$last"
ret=$?
if [ $ret -ne 0 ] ; then
	echo "ERROR: Failed to log a message due to the following error: $B_ERR" >&2
	echo "Exit code: $ret" >&2
	echo "Original message: $msg" >&2
	local stack="$(b_printStackTrace 1)"
	echo "Stack Trace:"$'\n'"$stack" >&2
	B_ERR=""
fi
b_resetErrorHandler
}

################### setters & getters ###################

#+b_flog_getDateFormat
#+Get the date format used for the header by this log writer (see "man date" for explanations).
#+returns: see above
function b_flog_getDateFormat {
echo "${BLIB_STORE["BLIB_FLOG_DATE_FORMAT"]}"
}

#+b_flog_setDateFormat [format string]
#+Set the date format used for the header by this log writer (see "man date" for explanations).
#+returns: nothing
#+@StateChanging
function b_flog_setDateFormat {
BLIB_STORE["BLIB_FLOG_DATE_FORMAT"]="$1"
}

#+b_flog_getLogReductionLinesLowerBound
#+Get the number of lines that the log file will at least have after a log file reduction.
#+returns: see above
function b_flog_getLogReductionLinesLowerBound {
echo "${BLIB_STORE["BLIB_FLOG_LOG_LINES_LB"]}"
}

#+b_flog_getLogReductionLinesUpperBound
#+Get the maximum number of lines that the log file will have before it is reduced.
#+returns: see above
function b_flog_getLogReductionLinesUpperBound {
echo "${BLIB_STORE["BLIB_FLOG_LOG_LINES_UB"]}"
}

#+b_flog_setLogReductionLinesLowerBound [bound]
#+Set the number of lines that the log file will at least have after a log file reduction.
#+[bound]: number of lines to use for that bound
#+returns: nothing
#+@StateChanging
function b_flog_setLogReductionLinesLowerBound {
BLIB_STORE["BLIB_FLOG_LOG_LINES_LB"]=$1
}

#+b_flog_setLogReductionLinesUpperBound
#+Set the maximum number of lines that the log file will have before it is reduced.
#+[bound]: number of lines to use for that bound
#+returns: nothing
#+@StateChanging
function b_flog_setLogReductionLinesUpperBound {
BLIB_STORE["BLIB_FLOG_LOG_LINES_UB"]=$1
}

#+b_flog_setLogReductionLinesApprox [line count]
#+Set the number of average number of lines that the log file should have; counts <= 0 indicate no limit.
#+[line count]: reduce the log after reaching 1.2\*\[line count\] lines to 0.8\*\[line count\] lines
#+returns: nothing
#+@StateChanging
function b_flog_setLogReductionLinesApprox {
local approx=$1
b_flog_setLogReductionLinesLowerBound "$(( $approx * 8/10 ))"
b_flog_setLogReductionLinesUpperBound "$(( $approx * 12/10 ))"
}

#+b_flog_getHeaderFunction
#+Get the name of the header callback function that is used.
#+returns: see above
function b_flog_getHeaderFunction {
echo "${BLIB_STORE["BLIB_FLOG_HEADER_FUNCTION"]}"
}

#+b_flog_setHeaderFunction [header function]
#+Set the name of the header callback function to be used.
#+[header function]: name of the header function to use
#+returns: nothing
#+@StateChanging
function b_flog_setHeaderFunction {
BLIB_STORE["BLIB_FLOG_HEADER_FUNCTION"]="$1"
}

#+##### Header Functions #####

#we attempt not to spawn subshells

#+b_flog_defaultHeader [severity]
#+Default header callback function used with [b_flog_init](#b_flog_init).
#+[severity]: the default header ignores the severity
#+returns: the default header meant to be used for the current moment in time
function b_flog_defaultHeader {
local date=
date="$(date +"${BLIB_STORE["BLIB_FLOG_DATE_FORMAT"]}")" || return 1
printf '%s ' "$date"
return 0
}

#+b_flog_headerDateSeverity [severity]
#+An alternative to the default header callback function which appends the severity to the default header.
#+[severity]: see [b_flog_init](#b_flog_init)
#+returns: the default header with the severity appended
function b_flog_headerDateSeverity {
local severity="$1"
b_flog_defaultHeader "$severity" || return 1
b_flog_printSeverity "$severity" || return 2
echo -n " "
return 0
}

#+b_flog_headerDateScriptSeverity [severity]
#+An alternative to the default header callback function which appends the calling script and the severity to the default header.
#+[severity]: see [b_flog_init](#b_flog_init)
#+returns: the default header with the calling script and severity appended
function b_flog_headerDateScriptSeverity {
local severity="$1"
b_flog_defaultHeader "$severity" || return 1
echo -n "$B_CALLER_NAME "
b_flog_printSeverity "$severity" || return 2
echo -n " "
return 0
}
