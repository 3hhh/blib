#!/bin/bash
#
#+Stateful ini reader for bash.
#+
#+Currently only a single file per instance of this library/thread is kept in memory, but you can read multiple files one after another or in multiple threads.
#+
#+Implementation Specifics:
#+
#+ * names/keys & values are case sensitive
#+ * comment lines may start with ; or #
#+ * whitespace lines are ignored
#+ * duplicate names may result in undefined behaviour (usually the second will override the first)
#+ * all characters following the = are considered part of the value (incl. whitespace); whitespace before and after the value may be trimmed by the getters though (check their description)
#+ * values are not interpreted (e.g. quotes, escape characters, ...)
#+ * whitespace around keys and around section qualifiers is ignored
#+
#+Copyright (C) 2018  David Hobach  LGPLv3
#+0.5

#internal state corresponding to the ini file last read
#key syntax: [section.name]
declare -gA BLIB_INI_FILE=()

#the ini file last read successfully
BLIB_STORE_VOLATILE["BLIB_INI_FILE"]=""

#separator character
BLIB_STORE["BLIB_INI_SEP"]="]"

#+### Functions ###

#+b_ini_read [ini file]
#+read the given ini file and keep it in thread-local memory so that subsequent calls to the b_ini_get functions will return the values from the ini file; subsequent calls to this function will update the internal state to represent the file last read in this thread
#+[ini file]: path to the ini file to read
#+returns: an error message on errors and sets a non-zero exit code on errors
#+@StateChanging
#+@B_E
function b_ini_read {
local iniFile="$1"

#clear the internal state
unset BLIB_INI_FILE
declare -gA BLIB_INI_FILE=()

#make sure the file exists
[ ! -f "$iniFile" ] && B_ERR="Could not open the ini file $iniFile for reading." && B_E

#read
local lastSection=""
local emptyRegex='^[[:blank:]]*$'
local commentRegex='^[[:blank:]]*[;#].*$'
local sectionRegex='^[[:blank:]]*\[(.*)\][[:blank:]]*$'
local keyValRegex='^[[:blank:]]*([^=]+[^[:blank:]]+)[[:blank:]]*=(.*)$'
local line=
while b_readLine line ; do
	#skip empty lines
	[[ "$line" =~ $emptyRegex ]] && continue

	#skip comments
	[[ "$line" =~ $commentRegex ]] && continue

	if [[ "$line" =~ $sectionRegex ]] ; then
		#section header
		lastSection="${BASH_REMATCH[1]}"
		[[ "$lastSection" == *"${BLIB_STORE["BLIB_INI_SEP"]}"* ]] && B_ERR="Sections with ${BLIB_STORE["BLIB_INI_SEP"]} in their names are currently not supported, sorry." && B_E
	elif [[ "$line" =~ $keyValRegex ]] ; then
		#key, value pair
		local id="${lastSection}${BLIB_STORE["BLIB_INI_SEP"]}${BASH_REMATCH[1]}"
		BLIB_INI_FILE["$id"]="${BASH_REMATCH[2]}"
	else
		B_ERR="The ini file $iniFile seems to be malformed. Line: $line" ; B_E
	fi
done < "$iniFile"

BLIB_STORE_VOLATILE["BLIB_INI_FILE"]="$iniFile"
return 0
}

#+b_ini_get [name] [section]
#+get the value for the ini entry with the given name as String in raw format
#+[name]: name/key of the ini entry to retrieve
#+[section]: section where to look for the entry with the given name (default: without section)
#+returns: value of the ini entry matching exactly the given section and name incl. any whitespace; a non-zero exit code is set if such an entry wasn't found
function b_ini_get {
local name="$1"
local section="$2"
local id="${section}${BLIB_STORE["BLIB_INI_SEP"]}$name"

echo "${BLIB_INI_FILE["$id"]}"

#set the exit value according to the existence of the id
[[ "${BLIB_INI_FILE["$id"]+exists}" == "exists" ]]
}

#+b_ini_getString [name] [section]
#+get the value for the ini entry with the given name as String and remove all whitespace around the returned String
#+[name]: name/key of the ini entry to retrieve
#+[section]: section where to look for the entry with the given name (default: without section)
#+returns: value of the ini entry matching exactly the given section and name excl. any whitespace around; a non-zero exit code is set if such an entry wasn't found
function b_ini_getString {
local ret=""
ret="$(b_ini_get "$1" "$2")"
[ $? -ne 0 ] && return 1

local re='^[[:blank:]]*(.*[^[:blank:]]+)[[:blank:]]*$'
[[ "$ret" =~ $re ]] && echo "${BASH_REMATCH[1]}" || echo ""
}

#+b_ini_getInt [name] [section]
#+get the value for the ini entry with the given name as integer
#+[name]: see [b_ini_get](#b_ini_get)
#+[section]: see [b_ini_get](#b_ini_get)
#+returns: see [b_ini_get](#b_ini_get); additionally it is checked whether the return value is an integer (if not, a non-zero exit code of 2 is set and the return value is undefined)
function b_ini_getInt {
local retStr=""
retStr="$(b_ini_get "$1" "$2")"
[ $? -ne 0 ] && return 1

[[ "$retStr" =~ ^([0-9]+)[[:blank:]]*$ ]] && echo "${BASH_REMATCH[1]}" || return 2

return 0
}

#+b_ini_getBool [name] [section]
#+get the value for the ini entry with the given name as boolean
#+[name]: see [b_ini_get](#b_ini_get)
#+[section]: see [b_ini_get](#b_ini_get)
#+returns: see [b_ini_get](#b_ini_get); 0 is returned via echo for true, 1 for false; the exit code indicates a potential error during parsing (2) or a missing entry (1) and _not_ true/false
function b_ini_getBool {
local retStr=""
retStr="$(b_ini_get "$1" "$2")"
[ $? -ne 0 ] && return 1

local trueRegex='^[[:blank:]]*[tT][rR][uU][eE][[:blank:]]*$'
local falseRegex='^[[:blank:]]*[fF][aA][lL][sS][eE][[:blank:]]*$'
if [[ "$retStr" =~ $trueRegex ]] ; then
	echo 0
	return 0
elif [[ "$retStr" =~ $falseRegex ]] ; then
	echo 1
	return 0
else
	return 2
fi
}

#+b_ini_assertNames [section 1] [name 1] ... [name n] -- [section 2] [name 1] ... [name m]
#+Assert that the given sections contains _at most_ the given names and no additional ones.
#+This is a useful function to detect user mistakes and should be called right after [b_ini_read](#b_ini_read).
#+Multiple sections can be separated with "--".
#+[section]: see [b_ini_get](#b_ini_get)
#+[name]: see [b_ini_get](#b_ini_get)
#+returns: Sets a zero exit code if and only if the last read ini file doesn't contain any additional names. Otherwise [B_E](#B_E) is triggered. [B_ERR](#B_ERR) will list the invalid names.
#+@B_E
function b_ini_assertNames {
local section="$1"
shift

#parse params
declare -A allowed=()
local cur=
while [ $# -gt 0 ] ; do
	cur="$1"

	if [[ "$cur" == "--" ]] ; then
		section="$2"
		shift
	else
		allowed["${section}${BLIB_STORE["BLIB_INI_SEP"]}$cur"]=0
	fi

	shift
done

#check
local invalid=""
for cur in "${!BLIB_INI_FILE[@]}" ; do
	if [ -z "${allowed["$cur"]}" ] ; then
		local sec="${cur%%${BLIB_STORE["BLIB_INI_SEP"]}*}"
		local name="${cur#*${BLIB_STORE["BLIB_INI_SEP"]}}"
		invalid="$invalid"$'\n'"[$sec] $name"
	fi
done

[ -n "$invalid" ] && B_ERR="Additional data in ${BLIB_STORE_VOLATILE["BLIB_INI_FILE"]}: $invalid" && B_E
return 0
}
