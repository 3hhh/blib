#!/bin/bash
#
#+Collection of file and file system related functions.
#+
#+Copyright (C) 2018  David Hobach  LGPLv3
#+0.3

#+### Functions ###

#+b_fs_getDeps
#+Get the dependencies of this module.
#+returns: newline-separated list of dependencies of this module
function b_fs_getDeps {
local deps=""
read -r -d '' deps << 'EOF'
wc
date
findmnt
mktemp
mount
head
stat
rm
sync
EOF

echo -n "$deps"
}

#+b_fs_isEmptyDir [dir]
#+Check whether the given directory is empty or non-existing. It is not checked whether the passed parameter is a file preventing a directory from being created.
#+[dir]: full path to the directory to check
#+returns: a zero exit code if the directory does not exist or is empty
function b_fs_isEmptyDir {
local dir="$1"
#test returns 0, if a file exists in the dir, 1 if there is no file and 2 if the * was incorrect as there is > 1 file (too many arguments)
test -e "$dir/"* 2> /dev/null
	case $? in
		1)      return 0 ;;
		*)      return 1 ;;
	esac
}

#+b_fs_getLastModifiedInDays [file]
#+Get the number of days since when a file was last modified.
#+[file]: Full path to the file to check.
#+returns: The time in days since the last modification. Sets a non-zero exit code on errors.
#+@B_E
function b_fs_getLastModifiedInDays {
local file="$1"
local now=
printf -v now '%(%s)T' -1
local lastAccess=""
lastAccess="$(date -r "$file" +%s)" || { B_ERR="Failed to read the timestamps of the file $file. Maybe it doesn't exist?" ; B_E }
local ret=$(( ( $now - $lastAccess ) / (60*60*24) ))
echo "$ret"
}

#+b_fs_getLineCount [file]
#+Get the number of lines of the given file.
#+[file]: full path to a file
#+returns: the number of lines; a non-zero exit code is set on errors
#+@B_E
function b_fs_getLineCount {
local file="$1"
local cnt=""

#NOTE: unfortunately wc -l includes the file name
cnt="$(wc -l "$file")" || { B_ERR="Failed to read the file $file." ; B_E }
[[ "$cnt" =~ ^([0-9]+) ]] && cnt="${BASH_REMATCH[1]}" || { B_ERR="Failed to obtain the line count for the file $file." ; B_E }

echo "$cnt"
}

#+b_fs_waitForFile [file] [maximum time]
#+Sleep until the given file appears. The check interval is 1s.
#+[file]: full path to the file or directory to wait for
#+[maximum time]: maximum time in s to wait for the file to appear (default: forever)
#+returns: Sets a zero exit code if the file appeared and a non-zero exit code on a timeout.
function b_fs_waitForFile {
local file="$1"
local maxTime="${2:--1}"

#NOTE: inotify is not much better as it simply fails to wait for non-existing files (and is not always installed)
local waited=0
while : ; do
	[ -e "$file" ] && return 0

	if [ $maxTime -gt 0 ] ; then
		[ $waited -gt $maxTime ] && return 1
		waited=$(( $waited +1))
	fi

	sleep 1
done

B_ERR="This shouldn't have happened. Programming mistake?!" ; B_E
}

#+b_fs_getMountpoints [device]
#+Get all mountpoints for the given device.
#+[device]: Full path to the device (incl. /dev/) for which to obtain the mountpoints.
#+returns: A newline-separated list of mountpoints where the given device is mounted to. Sets a non-zero exit code if no such mountpoints were found.
function b_fs_getMountpoints {
local dev="$1"
findmnt -n -o TARGET -S "$dev"
}

#+b_fs_mountIfNecessary [device] [mount point] [enforce]
#+Mount the given device if it isn't already mounted.
#+[device]: Full path to the device (incl. /dev/) to mount.
#+[mount point]: Full path where to mount the device. If no mount point is specified, a /tmp/ mount point is chosen. Non-existing directories are created. Is ignored if another mount point already exists.
#+[enforce]: If set to 0, enforce the given mount point to be used in addition to potentially existing ones (default: 1).
#+returns: The chosen mount point or a newline-separated list of existing mount points on success; sets a non-zero exit code on failure.
#+@B_E
function b_fs_mountIfNecessary {
local dev="$1"
local mp="$2"
local enforce="${3:-1}"

local ret=
ret="$(b_fs_getMountpoints "$dev")"

if [ -n "$mp" ] ; then
	mkdir -p "$mp" || { B_ERR="Failed to create the parent directories of $mp." ; B_E }

	if [ $enforce -eq 0 ] ; then
		#NOTE: we use findmnt as devices and mount points can come in many notations
		if ! findmnt --source "$dev" --mountpoint "$mp" &> /dev/null ; then
			local cur=
			while IFS= read -r cur ; do
				if [ -n "$cur" ] ; then
					mount --bind "$cur" "$mp" &> /dev/null || { B_ERR="Failed to rebind $cur to $mp." ; B_E }
					ret="$mp"$'\n'"$ret"
					break
				fi
			done <<< "$ret"
		fi
	fi
fi

if [ -n "$ret" ] ; then
	echo "$ret"
	return 0
fi

if [ -z "$mp" ] ; then
	mp="$(mktemp -d)" || { B_ERR="Failed to create a temporary directory." ; B_E }
fi

mount "$dev" "$mp" &> /dev/null && echo "$mp" || { B_ERR="Failed to mount the device $dev to $mp." ; B_E }
}

#+b_fs_createLoopDeviceIfNecessary [file]
#+Create a loop device for the given file if no old one exists. Usually requires root access rights.
#+[file]: File for which to create a loop device.
#+returns: Created loop device or previously used one (incl. /dev/). Sets a non-zero exit code, if no device could be created.
#+@B_E
function b_fs_createLoopDeviceIfNecessary {
local file="$1"

#-L was apparently introduced with losetup 2.29.x
#--> we first try to use it and then fall back to not using it
#NOTE: we cannot check the version in userspace (usually also requires root)
losetup -f -L --show "$file" 2> /dev/null

#do it manually
if [ $? -ne 0 ] ; then
	local oldDev=""
	oldDev="$(losetup -n -O NAME -j "$file")"

	if [ $? -eq 0 ] && [ -n "$oldDev" ] ; then
		echo "$oldDev"
	else
		#no old device --> create a new one
		#we use the exit code as ours
		#usually requires root access rights
		losetup -f --show "$file" || { B_ERR="Failed to create a loop device from $file." ; B_E }
	fi
fi
}

#+b_fs_removeUnusedLoopDevice [device|file]
#+Remove a loop device, if and only if it is unused by the operating system. Otherwise mark it for removal once it becomes unused. Usually requires root access rights.
#+[device|file]: Full path (incl. /dev/) to the loop device or to the backing file.
#+returns: Sets a zero exit code, if the loop device was not used and could thus be successfully removed _or_ does not exist. A nonzero exit code indicates that the device is still being used. [B_E](#B_E) is called on other errors.
#+@B_E
function b_fs_removeUnusedLoopDevice {
local in="$1"
local loop=
local file=
if [ -b "$in" ] ; then
	loop="$in"
	file="$(losetup -n --raw -O "back-file" "$loop")" || { B_ERR="Failed to execute losetup -n." ; B_E }
	#NOTE: the kernel often leaves the node alone after losetup -d was called on an existing loop device --> -b may return true, even if the loop device is down; the back-file check will return no file, but a zero exit code then
	[ -z "$file" ] && return 0
elif [ -f "$in" ] ; then
	#NOTE: losetup returns a zero exit code below even if the file does not exist _or_ has no loop device
	loop="$(losetup -j "$in" -O "name" --raw -n)" || { B_ERR="Failed to execute losetup -j." ; B_E }
	file="$in"
	[ -z "$loop" ] && return 0
	local loopCnt="$(echo "$loop" | wc -l)"
	[ $loopCnt -ne 1 ] && { B_ERR="$loopCnt loop devices detected for $in. Backing off..." ; B_E }
else
	return 0
fi

#NOTE: losetup -d only _asks_ the kernel to remove the loop, if it's unused --> we need to give the kernel some time & check whether it was removed
losetup -d "$loop" || { B_ERR="Failed to execute losetup -d." ; B_E }
sleep 0.1
local out=
out="$(losetup -j "$file" -O "name" --raw -n)" || { B_ERR="Failed to execute losetup." ; B_E }
#NOTE:
# - losetup returns a zero exit code even if there's no matching file
# - if the loop was recreated by another process in the meantime, the file is hopefully a different one
# - this isn't 100% thread safe, but should be okay in most situations
[[ "$out" != "$loop" ]]
}

#+b_fs_parseSize [string] [check flag]
#+Parse human-readable file system sizes that include units.
#+[string]: A string denoting a file system size of the format [number][unit]. Unit may be one of KB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024, and so on for T, P. If no unit is provided, the number is assumed to denote bytes. The number must be an integer.
#+[check flag]: Check whether the result makes sense (default: 0/true). This check will make integer overflows less likely.
#+returns: The respective number of bytes meant with the given string. [B_E](#B_E) is called on parsing errors.
#+@B_E
function b_fs_parseSize {
local str="$1"
local checkFlag="${2:-0}"

local re='^[[:space:]]*([\+\-]?)([0-9]+)([bBkKmMgGtTpP]?[bB]?)[[:space:]]*$'
[[ "$str" =~ $re ]] || { B_ERR="Failed to parse the size: $str" ; B_E }

local pref="${BASH_REMATCH[1]}"
local num="${BASH_REMATCH[2]}"
local unit="${BASH_REMATCH[3]^^}"

declare -A precomp=(
	[B]=1
	[K]=1024
	[KB]=1000
	[M]=1048576
	[MB]=1000000
	[G]=1073741824
	[GB]=1000000000
	[T]=1099511627776
	[TB]=1000000000000
	[P]=1125899906842624
	[PB]=1000000000000000
	)

local prec=1
[ -n "$unit" ] && prec="${precomp["$unit"]}"
[ -z "$prec" ] && prec=1
local ret=$(( $num * $prec ))

if [ $checkFlag -eq 0 ] ; then
	if [[ $ret -lt 0 || ( $num -ne 0 && $ret -eq 0 ) || ( $num -ne 0 && $ret -lt $prec ) ]] ; then
		B_ERR="An integer overflow was detected."
		B_E
	fi
fi

[[ "$pref" == "-" ]] && [ $ret -ne 0 ] && echo -n "$pref"
echo "$ret"
}

#+b_fs_removeWithOverwrite [file] [randomness source]
#+Overwrite the given file with random data, then remove it. This is meant to prevent a potential reconstruction of the file after its removal.
#+*Warning*: The reconstruction may still work on some types of file systems or physical storage systems (e.g. on flash disks).
#+[file]: Full path to the file to remove. Directories are currently not supported.
#+[randomness source]: Device to use as source of random data (default: /dev/random).
#+returns: Nothing. [B_E](#B_E) is called on errors.
#+@B_E
function b_fs_removeWithOverwrite {
local file="$1"
local rdev="${2:-/dev/random}"

[ -f "$file" ] || { B_ERR="The file $file doesn't exist." ; B_E }
[ -c "$rdev" ] || { B_ERR="Nonexisting randomness source: $rdev" ; B_E }

local fsize=
fsize="$(stat -c %s "$file")" || { B_ERR="Failed to identify the size of the file $file." ; B_E }

head -c "$fsize" < "$rdev" > "$file" || { B_ERR="Failed to overwrite the file $file." ; B_E }
sync -d "$file" || { B_ERR="Failed to sync the file $file." ; B_E }
rm -f "$file" || { B_ERR="Failed to remove the file $file." ; B_E }
return 0
}
