#!/bin/bash
#
#+Abstraction layer for cryptsetup / dm-crypt.
#+
#+Features:
#+ - automatic management of dm-crypt devices
#+ - password support for non-tty environments
#+
#+Copyright (C) 2020  David Hobach  LGPLv3
#+0.6

b_import ui

BLIB_STORE["BLIB_DMCRYPT_UI_MODE"]="auto"

#+### Functions ###

#+b_dmcrypt_getDeps
#+Get the dependencies of this module.
#+returns: newline-separated list of dependencies of this module
function b_dmcrypt_getDeps {
local deps=""
read -r -d '' deps << 'EOF'
dirname
mkdir
head
md5sum
readlink
EOF
#NOTE: cryptsetup is not here to allow using those functions in user mode that don't require cryptsetup (which can usually only be executed by root)

echo -n "$deps"
}

#blib_assertCryptsetup
#@B_E
function blib_assertCryptsetup {
command -v "cryptsetup" &> /dev/null || { B_ERR="Couldn't find cryptetup (maybe you're not root?)." ; B_E }
}

#+b_dmcrypt_init [ui mode]
#+Initialize this module. This function *must* be called at least once before using any of the other functions.
#+[ui mode]: How to request a password from the user: auto|gui|tty (default: auto).
#+returns: Nothing.
#+@B_E
function b_dmcrypt_init {
BLIB_STORE["BLIB_DMCRYPT_UI_MODE"]="${1:-"auto"}"
return 0
}

#+b_dmcrypt_getMapperName [path]
#+Get the name of the dm-crypt mapper for a given path.
#+[path]: Full path to an encrypted file.
#+returns: A mapper name. This doesn't necessarily mean that the encrypted container is open. Use [b_dmcrypt_isOpen](#b_dmcrypt_isOpen) for that.
#+@B_E
function b_dmcrypt_getMapperName {
#idea: Compute a likely unique mapper name in a stateless way from the path.
local path="$1"
local cPath=
cPath="$(readlink -m "$path")" || { B_ERR="Failed to retrieve the canonical path for $path" ; B_E }
local md5=
md5="$(echo "$cPath" | md5sum -)" || { B_ERR="Failed to execute md5sum." ; B_E }
md5="${md5//-/}"
md5="${md5// /}"
echo "blib-dmcrypt-$md5"
}

#blib_dmcrypt_passwordRequired [dm-crypt option 1] ... [dm-crypt option n]
#returns: a zero exit code, if and only if we need to ask a password from the user
function blib_dmcrypt_passwordRequired {
local arg=
for arg in "$@" ; do
	[[ "$arg" == "--key-file" ]] && return 1
done
return 0
}

#blib_dmcrypt_getOpenKeyfileArguments [arguments]
#returns: All arguments related to key files, usable for cryptsetup open, fully escaped. Always sets a zero exit code.
function blib_dmcrypt_getOpenKeyfileArguments {
local arg=
local next=1
for arg in "$@" ; do
	#maybe TODO: also support the short format arguments and more proper argument parsing in general, cf. man cryptsetup
	if [[ "$arg" == "--key"* ]] || [[ "$arg" == "--master-key-file" ]] ; then
		printf '%s ' "$arg"
		next=0
	else
		if [ $next -eq 0 ] ; then
			printf '%q ' "$arg"
			next=1
		fi
	fi
done
return 0
}

#+b_dmcrypt_createLuks [path] [size] [fs type] [entropy source] [password prompt] [dm-crypt option 1] ... [dm-crypt option n]
#+Create an encrypted luks container file at the given location.
#+This function may request a password from the user and usually requires root access rights.
#+[path]: Full path to the encrypted file to create.
#+[size]: Filesystem size in bytes to create. Supported suffixes: b 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024, GB 1000*1000*1000, G 1024*1024*1024
#+[fs type]: Filesystem to create inside the encrypted container. If none is specified (default), no file system is created.
#+[entropy source]: Source of entropy to use for the file setup (default: /dev/urandom).
#+[password prompt]: Prompt string to ask the user for his password (optional).
#+[dm-crypt option i]: These options are directly passed to `cryptsetup`.
#+returns: Sets a zero exit code on success and errors out with [B_E](#B_E) otherwise.
#+@B_E
function b_dmcrypt_createLuks {
local path="$1"
local size="$2"
local fsType="$3"
local entropy="${4:-"/dev/urandom"}"
local promptStr="${5:-"Password for $path: "}"
shift 3
shift
shift
blib_assertCryptsetup || B_E

[ -e "$path" ] && B_ERR="$path already exists. Backing off..." && B_E

local dir=
dir="$(dirname "$path")" || { B_ERR="Failed to run dirname." ; B_E }
mkdir -p "$dir" || { B_ERR="Failed to run mkdir." ; B_E }

local mname=
mname="$(b_dmcrypt_getMapperName "$path")" || { B_ERR="Failed to obtain a valid mapper name for $path." ; B_E }

#obtain password, if necessary
local pass=""
if blib_dmcrypt_passwordRequired "$@" ; then
	b_ui_passwordPrompt "pass" "${BLIB_STORE["BLIB_DMCRYPT_UI_MODE"]}" "$promptStr" || B_E
fi

#create the container
(	set -e
	head -c "$size" < "$entropy" > "$path"
	echo -n "$pass" | cryptsetup -q "$@" luksFormat "$path"

	#open & create fs, if necessary
	if [ -n "$fsType" ] ; then
		if [ -n "$pass" ] ; then
			echo -n "$pass" | cryptsetup --type luks open "$path" "$mname"
		else
			local keyfileArgs="$(blib_dmcrypt_getOpenKeyfileArguments "$@")"
			cryptsetup --type luks $keyfileArgs open "$path" "$mname"
		fi
		mkfs -t "$fsType" "/dev/mapper/$mname" &> /dev/null
		cryptsetup close "$mname"
	fi
)
if [ $? -ne 0 ] ; then
	cryptsetup close "$mname" &> /dev/null
	#overwrite the password & remove it from memory
	pass="${pass//?/0}"
	pass=""
	rm -f "$path"
	B_ERR="Failed to initialize the encrypted file at $path."
	B_E
fi

#cleanup
pass="${pass//?/0}"
pass=""
}

#+b_dmcrypt_open [path] [mount point] [output var] [password prompt] [dm-crypt option 1] ... [dm-crypt option n]
#+Open/Decrypt the given container and optionally mount it.
#+[path]: Full path to the encrypted file.
#+[mount point]: Where to mount the decrypted data (optional). If no mount point is specified, it will not be mounted.
#+[output var]: The name of the variable to write the created device to (optional).
#+[password prompt]: Prompt string to ask the user for his password (optional).
#+[dm-crypt option i]: These options are directly passed to `cryptsetup`.
#+returns: Sets a zero exit code on success.
#+@B_E
function b_dmcrypt_open {
local _path="$1"
local _mp="$2"
local _outVar="$3"
local _promptStr="${4:-"Password for $_path: "}"
shift 2
shift
shift
blib_assertCryptsetup || B_E

local _mname=
_mname="$(b_dmcrypt_getMapperName "$_path")" || { B_ERR="Failed to obtain a valid mapper name for $_path." ; B_E }

#obtain password, if necessary
local _passw=""
if blib_dmcrypt_passwordRequired "$@" ; then
	b_ui_passwordPrompt "_passw" "${BLIB_STORE["BLIB_DMCRYPT_UI_MODE"]}" "$_promptStr" || B_E
fi

#open
echo -n "$_passw" | cryptsetup "$@" open "$_path" "$_mname" || { _passw="${_passw//?/0}" ; _passw="" ; B_ERR="Failed to open the encrypted container $_path." ; B_E }
local _dev="/dev/mapper/$_mname"

#overwrite the password in memory with zeroes, then free it
_passw="${pass//?/0}" ; _passw=""

#mount, if necessary
if [ -n "$_mp" ] ; then
	mkdir -p "$_mp" || { B_ERR="Failed to create the mount point $_mp." ; B_E }
	mount "$_dev" "$_mp" || { B_ERR="Failed to mount $_dev to $_mp." ; B_E }
fi

#set the output variable
[ -n "$_outVar" ] && eval $_outVar="'$_dev'"
}

#+b_dmcrypt_close [path] [dm-crypt option 1] ... [dm-crypt option n]
#+Close the given encrypted container.
#+[path]: Full path to the encrypted file.
#+[dm-crypt option i]: These options are directly passed to `cryptsetup`.
#+returns: A zero exit code on success.
#+@B_E
function b_dmcrypt_close {
local path="$1"
shift
blib_assertCryptsetup || B_E

local mname=
mname="$(b_dmcrypt_getMapperName "$path")" || { B_ERR="Failed to obtain a valid mapper name for $path." ; B_E }

umount "/dev/mapper/$mname" &> /dev/null
cryptsetup "$@" close "$mname" || { B_ERR="Failed to close $path." ; B_E }
}

#+b_dmcrypt_isOpen [path]
#+Check whether the given encrypted container is open (not necessarily mounted).
#+[path]: Full path to the encrypted file.
#+returns: Sets a zero exit code, if and only if the container is open. [B_E](#B_E) is only called for exceptional errors.
#+@B_E
function b_dmcrypt_isOpen {
local path="$1"
blib_assertCryptsetup || B_E

local mname=
mname="$(b_dmcrypt_getMapperName "$path")" || { B_ERR="Failed to obtain a valid mapper name for $path." ; B_E }

cryptsetup status "$mname" &> /dev/null
}
