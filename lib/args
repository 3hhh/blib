#!/bin/bash
#
#+Stateful argument parser for bash.
#+
#+Regular arguments and options are parsed via [b_args_parse](#b_args_parse). Afterwards they can be retrieved via [b_args_get](#b_args_get) and [b_args_getOption](#b_args_getOption). Options may have parameters, can be repeated and combined.
#+
#+The module can also check the correctness of options. All remaining correctness checks (e.g. for regular or option parameters) are left to the user of this module.
#+
#+Conventions:
#+
#+ * Options always start with `-` and may occur everywhere.
#+ * Single character options may be combined, e.g. `-ajh` will be considered the same as `-a -j -h`. Long options such as `--option` cannot be combined.
#+   _Recommendation_: Use long options for those options which require parameters and single letter options for everything else.
#+ * Everything after a space-separated double dash (`--`) is not considered an option, but a regular argument.
#+
#+Copyright (C) 2019  David Hobach  LGPLv3
#+0.8

b_import "types"

#+### Global Variables ###

#+B_ARGS
#+Array of regular/non-option arguments in the order of their appearance.
#+Instead of using it directly, it is recommended to use [b_args_get](#b_args_get) instead. The array may be removed in future versions.
declare -ga B_ARGS=()

#+B_ARGS_OPTS
#+Map of options. `[option]_[index]` is used as key with `[index]` starting at zero. The values are the option parameters (if any). Multiple option parameters are separated by tabs.
#+The latter separator can be changed via [b_args_setOptionParamSeparator](#b_args_setOptionParamSeparator) before calling [b_args_parse](#b_args_parse).
#+The index will only increase if options are repeated.
#+Instead of using it directly, it is recommended to use [b_args_getOption](#b_args_getOption) instead. The array may be removed in future versions.
declare -gA B_ARGS_OPTS=()

#number of expected option parameters per option
declare -gA BLIB_ARGS_OPTCNT=()

#allow flag
BLIB_STORE_VOLATILE["BLIB_ARGS_ALLOW"]=0

#used by b_args_parse as global return variable
BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"]=""

#multiple option parameter separator (default: tab)
BLIB_STORE["BLIB_ARGS_OPSEP"]='	'

#+### Functions ###

#+b_args_getDeps
#+Get the dependencies of this module.
#+returns: newline-separated list of dependencies of this module
function b_args_getDeps {
return 0
}

#+b_args_setOptionParamSeparator [separator]
#+Set the separator for multiple option parameters.
#+[separator]: String to use as separator for multiple option parameters.
#+returns: Nothing.
function b_args_setOptionParamSeparator {
BLIB_STORE["BLIB_ARGS_OPSEP"]="$1"
}

#+b_args_getOptionParamSeparator
#+Get the separator for multiple option parameters.
#+returns: Nothing.
function b_args_getOptionParamSeparator {
echo "${BLIB_STORE["BLIB_ARGS_OPSEP"]}"
}

#blib_args_clearState [include options]
#Clears the internal state.
function blib_args_clearState {
local includeOptions="${1:-1}"

#NOTE: bash 4.3 appears to require that =() in order to execute the declare, bash 4.4 does not
B_ARGS=()
unset -v B_ARGS_OPTS
declare -gA B_ARGS_OPTS=()

if [ $includeOptions -eq 0 ] ; then
	unset -v BLIB_ARGS_OPTCNT
	declare -gA BLIB_ARGS_OPTCNT=()
fi

return 0
}

#+b_args_init [allow flag] [option 1] [option param count 1] ... [option n] [option param count n]
#+Initialize the args module. It is recommended to call this function before using this module, if you want to achieve any non-default behaviour.
#+[allow flag]: If set to 0, assume that non-specified options do not have any parameters (default). If set to 1, enforce that only the given options are allowed and otherwise error out.
#+[option i]: An allowed option including its leading `-` prefix.
#+[option param count i]: Number of expected parameters for that option. The parameters must directly follow the option. If less parameters are found, the parser will error out.
#+returns: Nothing, always sets a zero exit code.
#+@StateChanging
#+@B_E
function b_args_init {
BLIB_STORE_VOLATILE["BLIB_ARGS_ALLOW"]="${1:-0}"
shift

blib_args_clearState 0

#parse params to internal state
local optRe='^(-[a-zA-Z0-9]|--[a-zA-Z0-9-]+)$'
while [ $# -gt 0 ] ; do
	local opt="$1"
	local optCnt="$2"
	shift
	shift
	[ -z "$optCnt" ] && B_ERR="Option count for $opt missing." && B_E
	[[ ! "$optCnt" =~ [0-9]+ ]] && B_ERR="Invalid option count for option $opt: $optCnt" && B_E
	[[ "$opt" =~ $optRe ]] || { B_ERR="Option with bad syntax: $opt" ; B_E }

	BLIB_ARGS_OPTCNT["$opt"]="$optCnt"
done

return 0
}

#blib_args_getNextIndex [option]
#Get the next available free index for that option.
#returns: The index. Never fails.
function blib_args_getNextIndex {
local opt="$1"

local ind=
for (( ind=0 ; ; ind++ )) ; do
	[ ! ${B_ARGS_OPTS["${opt}_$ind"]+exists} ] && echo "$ind" && return 0
done
}

#blib_args_parseSingleOpt [option]
#Parse a single option, such as `-r`, `-k` or `--foo`.
#returns: Sets a zero exit code on success and calls [B_E](#B_E) otherwise. If an option requires further arguments, that option including its index is returned via BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"].
#@B_E
#@StateChanging
function blib_args_parseSingleOpt {
local opt="$1"

local ind="${opt}_$(blib_args_getNextIndex "$opt")"
B_ARGS_OPTS["$ind"]=""
local retArgs="${BLIB_ARGS_OPTCNT["$opt"]}"
if [ -n "$retArgs" ] && [ $retArgs -gt 0 ] ; then
	if [ -z "${BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"]}" ] ; then
		BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"]="$ind"
	else
		B_ERR="Ambiguous syntax: The options $opt and ${BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"]} may both have arguments, but are used together. It is now unclear to which one the arguments belong."
		B_E
	fi
fi
return 0
}

#blib_args_parseOptStr [option string]
#Parse a single option string, such as `-ar`, `-k` or `--foo`.
#returns: Sets a zero exit code on success and calls [B_E](#B_E) otherwise. If an option requires further arguments, that option including its index is returned via BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"].
#@B_E
#@StateChanging
function blib_args_parseOptStr {
local optStr="$1"
BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"]=""

if [[ "$optStr" == "--"* ]] ; then
	#single long option
	blib_args_parseSingleOpt "$optStr" || B_E
elif [[ "$optStr" == "-"* ]] ; then
	#one or multiple options, each using a single character
	local i=
	local opt=
	for (( i=1; i < ${#optStr} ; i++ )) ; do
		opt="-${optStr:$i:1}"
		blib_args_parseSingleOpt "$opt" || B_E
	done
else
	B_ERR="No option: $optStr"
	B_E
fi

return 0
}

#+b_args_parse [arguments]
#+Parse the given arguments.
#+Call [b_args_init](#b_args_init) before parsing, if you desire any non-default parsing behaviour.
#+[arguments]: The arguments meant to be parsed, usually "$@".
#+returns: Sets a zero exit code on success and calls [B_E](#B_E) otherwise.
#+@StateChanging
#+@B_E
function b_args_parse {
local i=
local j=
local par=
local foundFinalOption=1

blib_args_clearState 1

#parse
for ((i=1;i<=$#;i++)) ; do
	par="${!i}"

	if [ $foundFinalOption -ne 0 ] && [[ "$par" == "--" ]] ; then
		#final option indicator
		foundFinalOption=0
	elif [ $foundFinalOption -ne 0 ] && [[ "$par" == "-"* ]] ; then
		#option
		blib_args_parseOptStr "$par" || B_E

		#store option arguments, if necessary
		local lastInd="${BLIB_STORE_VOLATILE["BLIB_ARGS_LASTPARSEDIND"]}"
		if [ -n "$lastInd" ] ; then
			local opt="${lastInd%_*}"
			local optParCnt="${BLIB_ARGS_OPTCNT["$opt"]}"
			[ -z "$optParCnt" ] && B_ERR="Bug?!" && B_E

			local maxInd=$(( $i + $optParCnt ))
			[ $maxInd -gt $# ] && B_ERR="The option $opt is assumed to have $optParCnt parameters." && B_E
			for ((j=$i+1;j<=$maxInd;j++)) ; do
				local optPar="${!j}"
				[[ "$optPar" == *"${BLIB_STORE["BLIB_ARGS_OPSEP"]}"* ]] && B_ERR="The option parameter $optPar contains the option parameter separator ${BLIB_STORE["BLIB_ARGS_OPSEP"]}. This will cause argument parsing to fail." && B_E
				[ -z "${B_ARGS_OPTS["$lastInd"]}" ] && B_ARGS_OPTS["$lastInd"]="$optPar" || B_ARGS_OPTS["$lastInd"]="${B_ARGS_OPTS["$lastInd"]}${BLIB_STORE["BLIB_ARGS_OPSEP"]}$optPar"
			done
		i=$(( $i + $optParCnt ))
		fi
	else
		#regular argument
		B_ARGS+=("$par")
	fi
done

if [ ${BLIB_STORE_VOLATILE["BLIB_ARGS_ALLOW"]} -ne 0 ] ; then
	local invalid=
	invalid="$(b_args_assertOptions "${!BLIB_ARGS_OPTCNT[@]}")" || { B_ERR="Invalid options: $invalid" ; B_E }
fi

return 0
}

#+b_args_assertOptions [option 1] ... [option n]
#+Assert that the parsed options contain only the given allowed options (or less).
#+[option i]: Option to check against.
#+[returns]: Sets a zero exit code, if the current parsed state contains only allowed options and errors out with [B_E](#B_E) otherwise. Prints a list of invalid options in the error case.
#+@B_E
function b_args_assertOptions {
declare -A expected
local opt=

for opt in "$@" ; do
	expected["$opt"]=0
done

local invalidOpts=""
for opt in "${!B_ARGS_OPTS[@]}" ; do
	opt="${opt%_*}"
	if [ -z "${expected["$opt"]}" ] ; then
		invalidOpts="$invalidOpts"$'\n'"$opt"
	fi
done

if [ -n "$invalidOpts" ] && [[ "$invalidOpts" != $'\n' ]] ; then
	B_ERR="Invalid options:$invalidOpts"
	B_E
fi

return 0
}

#+b_args_get [index] [fallback]
#+Get the argument at the given index.
#+[index]: Index of the argument to retrieve, starting at 0.
#+[fallback]: Value to return, if the given index was provided as empty argument or is missing. Default: empty String
#+returns: The argument at the given index. An _empty_ (existing!) argument will cause the fallback to be returned with a zero exit code. If no argument was found at that index, a nonzero exit code is set and the fallback is returned.
function b_args_get {
local ind="$1"
local fb="$2"

if [ $ind -ge 0 ] && [ $ind -lt ${#B_ARGS[@]} ] ; then
	[ -z "${B_ARGS[$ind]}" ] && echo "$fb" || echo "${B_ARGS[$ind]}"
	return 0
else
	echo "$fb"
	return 1
fi
}

#+b_args_getInt [index] [fallback]
#+Convenience wrapper for [b_args_get](#b_args_get) that also checks the type of the argument to be an integer.
#+returns: See [b_args_get](#b_args_get). Also sets a nonzero exit code, if the argument is not an integer.
function b_args_getInt {
local fb="$2"

local ret=
local retC=
ret="$(b_args_get "$@")"
retC=$?

if [ $retC -ne 0 ] ; then
	echo "$ret"
	return $retC
else
	if b_types_isInteger "$ret" ; then
		echo "$ret"
		return 0
	else
		echo "$fb"
		return 3
	fi

fi
}

#+b_args_getCount
#+Get the number of arguments.
#+returns: Number of arguments.
function b_args_getCount {
echo "${#B_ARGS[@]}"
}

#+b_args_getOption [option] [fallback] [repeat index] [parameter index]
#+Check whether the given option is set and retrieve its parameter, if it was.
#+[option]: String defining the option, e.g. `--option` or `-a`.
#+[fallback]: Value to return if the option did not have any parameter or was not set. Default: empty String
#+[repeat index]: Index of the option to retrieve, if the option was repeated multiple times (default: 0 = first option).
#+[parameter index]: Index of the option parameter to retrieve, starting at 0 (default: return all option parameters, separated by [b_args_getOptionParamSeparator](#b_args_getOptionParamSeparator)).
#+returns: The option parameter, if the option was set. The fallback is returned and a zero exit code is set, if the option was set, but an _empty_ (existing!) parameter was provided. A nonzero exit code indicates that the option was not set (the fallback is still returned).
function b_args_getOption {
local opt="$1"
local fb="$2"
local rind="${3:-0}"
local pind="$4"

if [ -n "${B_ARGS_OPTS["${opt}_$rind"]+exists}" ] ; then
	local ret="${B_ARGS_OPTS["${opt}_$rind"]}"
	if [ -z "$pind" ] ; then
		[ -z "$ret" ] && echo "$fb" || echo "$ret"
		return 0
	else
		#parse
		local rem="$ret"
		local i=0
		while [ -n "$rem" ] || [ $i -eq 0 ] ; do
			if [ $i -eq $pind ] ; then
				ret="${rem%${BLIB_STORE["BLIB_ARGS_OPSEP"]}*}"
				[ -z "$ret" ] && echo "$fb" || echo "$ret"
				return 0
			else
				#check whether the current element was the last
				[[ "$rem" != *"${BLIB_STORE["BLIB_ARGS_OPSEP"]}"* ]] && break

				#update to next element
				rem="${rem#*${BLIB_STORE["BLIB_ARGS_OPSEP"]}}"
				((++i))
			fi
		done

		#nonexisting index
		echo "$fb"
		return 2
	fi
else
	echo "$fb"
	return 1
fi
}

#+b_args_getOptionInt [option] [fallback] [repeat index] [parameter index]
#+Convenience wrapper for [b_args_getOption](#b_args_getOption) that also checks the type of the option to be an integer.
#+returns: See [b_args_getOption](#b_args_getOption). Also sets a nonzero exit code, if the option is not an integer.
function b_args_getOptionInt {
local fb="$2"

local ret=
local retC=
ret="$(b_args_getOption "$@")"
retC=$?

if [ $retC -ne 0 ] ; then
	echo "$ret"
	return $retC
else
	if b_types_isInteger "$ret" ; then
		echo "$ret"
		return 0
	else
		echo "$fb"
		return 3
	fi

fi
}

#+b_args_getOptionCount
#+Get the number of options that were set.
#+returns: Number of options (incl. repeated options).
function b_args_getOptionCount {
echo "${#B_ARGS_OPTS[@]}"
}
