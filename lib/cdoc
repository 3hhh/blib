#!/bin/bash
#
#+Generate code documentation in many formats (e.g. html, pdf, manpage, ...) from code comments.
#+
#+Lines applicable for the documentation in your code are assumed to match static (configurable) regular expressions. These lines are then fed to [pandoc] in order to generate a single html page (or pdf, manpage, ...) as documentation. If no conversion is required (input format = desired output format), pandoc is bypassed.
#+
#+It should be possible to use this way of generating code documentation with most programming languages (incl. bash). The defaults however are set for bash and the blib way of documenting its code, i.e. you'll have to use the getters and setters of this module if you want something different. For instance the default is to check for lines starting with _#+_ (a special bash comment line) and add everything afterwards to the output documentation.
#+
#+Various callback functions can be used to add content to the output of b_cdoc_generate. See the documentation of that function for details.
#+
#+If you wish to create code documentation for your bash project in blib style, please use `../util/blib-cdoc`.
#+
#+ [pandoc]: https://pandoc.org/
#+
#+Copyright (C) 2020  David Hobach  LGPLv3
#+0.6

b_import fs
b_deps "mv" "rm" "mktemp" "cat"

#storage for the getter & setters and their defaults
BLIB_STORE["BLIB_CDOC_EXTRACTION_REGEX"]='^#\+(.*)$'
BLIB_STORE["BLIB_CDOC_FILE_CALLBACK"]='b_nop'
BLIB_STORE["BLIB_CDOC_DOCUMENT_BEGIN_CALLBACK"]='b_nop'
BLIB_STORE["BLIB_CDOC_POST_PROCESSING_CALLBACK"]='b_cdoc_cbPrintFirstParam'
BLIB_STORE["BLIB_CDOC_DOCUMENT_END_CALLBACK"]='b_nop'
BLIB_STORE["BLIB_CDOC_BLOCK_CALLBACK"]='b_cdoc_cbPrintFirstParam'

#+### Functions ###

#+b_cdoc_setExtractionRegex [regex]
#+Set the regular expression used to check for matching lines in code files. The first match (${BASH_REMATCH[1]}) is added to the documentation output.
#+returns: nothing
#+@StateChanging
function b_cdoc_setExtractionRegex {
BLIB_STORE["BLIB_CDOC_EXTRACTION_REGEX"]="$1"
}

#+b_cdoc_getExtractionRegex
#+See the setter.
#+returns: The property that was set.
function b_cdoc_getExtractionRegex {
echo "${BLIB_STORE["BLIB_CDOC_EXTRACTION_REGEX"]}"
}

#+b_cdoc_setFileCallback [callback function name]
#+Set the function to call by b_cdoc_generate exactly once before starting to process a source code file.
#+
#+The callback function can be used to filter certain files from processing or add them as-is.
#+It should be declared as follows:
#+
#+    callback_function_name [file] [output format]
#+    [file]:           The next file to process is passed here.
#+    [output format]:  chosen output format
#+    returns:          Nothing. Possible exit codes:
#+                      0 = continue normal processing (default)
#+                      1 = include the file as-is without any processing
#+                      2 = silently ignore that file / do not process it
#+                      other = abort all further processing with an error
#+returns: nothing
#+@StateChanging
function b_cdoc_setFileCallback {
BLIB_STORE["BLIB_CDOC_FILE_CALLBACK"]="$1"
}

#+b_cdoc_getFileCallback
#+See the setter.
#+returns: The property that was set.
function b_cdoc_getFileCallback {
echo "${BLIB_STORE["BLIB_CDOC_FILE_CALLBACK"]}"
}

#+b_cdoc_setDocumentBeginCallback [callback function name]
#+Set the function to call by b_cdoc_generate exactly once right before it starts generating the output document.
#+
#+The callback function should be declared as follows:
#+
#+    callback_function_name [document output file] [document output format]
#+    [document output file]: path to the document output file
#+              (may not exist and should not be written to)
#+    [document output format]: chosen output format
#+    returns:  whatever should be added at the beginning of the output document;
#+              a non-zero exit code will abort further processing
#+
#+returns: nothing
#+@StateChanging
function b_cdoc_setDocumentBeginCallback {
BLIB_STORE["BLIB_CDOC_DOCUMENT_BEGIN_CALLBACK"]="$1"
}

#+b_cdoc_getDocumentBeginCallback
#+See the setter.
#+returns: The property that was set.
function b_cdoc_getDocumentBeginCallback {
echo "${BLIB_STORE["BLIB_CDOC_DOCUMENT_BEGIN_CALLBACK"]}"
}

#+b_cdoc_setPostProcessingCallback [callback function name]
#+Set the function to call by b_cdoc_generate each time a code file was fully processed.
#+
#+The callback function should be declared as follows:
#+
#+    callback_function_name [processed input] [input file] [document output format]
#+    [processed input]: Everything that was found to match the 
#+                       extraction regex in the [input file] by b_cdoc_generate.
#+    [input file]:      The original input file.
#+    [document output format]: chosen output format
#+    returns:           whatever should be added to the output document for the 
#+                       given input file (usually the processed input or some filtered
#+                       version of it); a non-zero exit code will abort further processing
#+
#+returns: nothing
#+@StateChanging
function b_cdoc_setPostProcessingCallback {
BLIB_STORE["BLIB_CDOC_POST_PROCESSING_CALLBACK"]="$1"
}

#+b_cdoc_getPostProcessingCallback
#+See the setter.
#+returns: The property that was set.
function b_cdoc_getPostProcessingCallback {
echo "${BLIB_STORE["BLIB_CDOC_POST_PROCESSING_CALLBACK"]}"
}

#+b_cdoc_setDocumentEndCallback [callback function name]
#+Set the function to call by b_cdoc_generate exactly once right after it generated the output document.
#+
#+The callback function should be declared as follows:
#+
#+    callback_function_name [document output file] [document output format]
#+    [document output file]: path to the document output file
#+                            (may not exist and should not be written to)
#+    [document output format]: chosen output format
#+    returns:                whatever should be added to the end of the output
#+                            document; a non-zero exit code will abort further processing
#+
#+returns: nothing
#+@StateChanging
function b_cdoc_setDocumentEndCallback {
BLIB_STORE["BLIB_CDOC_DOCUMENT_END_CALLBACK"]="$1"
}

#+b_cdoc_getDocumentEndCallback
#+See the setter.
#+returns: The property that was set.
function b_cdoc_getDocumentEndCallback {
echo "${BLIB_STORE["BLIB_CDOC_DOCUMENT_END_CALLBACK"]}"
}

#+b_cdoc_setBlockCallback [callback function name]
#+Set the function to call by b_cdoc_generate each time it hits a block of matching comments.
#+
#+The callback function should be declared as follows:
#+
#+    callback_function_name [block] [input file] [document output format]
#+    [block]:         The full block of documentation that was identified.
#+    [block counter]: Number of blocks previously seen.
#+    [input file]:    The original input file.
#+    [document output format]: chosen output format
#+    returns:         whatever should be added instead of the given block;
#+                     a non-zero exit code will abort further processing
#+
#+returns: nothing
#+@StateChanging
function b_cdoc_setBlockCallback {
BLIB_STORE["BLIB_CDOC_BLOCK_CALLBACK"]="$1"
}

#+b_cdoc_getBlockCallback
#+See the setter.
#+returns: The property that was set.
function b_cdoc_getBlockCallback {
echo "${BLIB_STORE["BLIB_CDOC_BLOCK_CALLBACK"]}"
}

#+b_cdoc_generate [input files] [output file] [output format] [additional pandoc options]
#+Generate a documentation file from the given list of input files or directories.
#+
#+The concept is really simple: Each _block_ of documentation will trigger the [b_cdoc_getBlockCallback](#b_cdoc_getBlockCallback) exactly once and you may add additional parsing logic on a block-wise level.
#+The following example will call the block callback twice (once with three `block 1` lines and once with two `block 2` lines):
#+```{.bash}
#+ #+block 1
#+ #+block 1
#+ #+block 1
#+ 
#+ #say hello
#+ echo "hello world"
#+ #+block 2
#+ #+block 2
#+```
#+
#+The other callback functions may be used for further processing.
#+
#+[input files]: Newline-separated list of files or directories to generate the documentation from. The given order is respected; directories are recursively searched for files. It is currently assumed that these files are encoded in UTF-8.
#+[output file]: Path to the documentation file to generate. Should not exist.
#+[output format]: The target format of the documentation to generate. See [pandoc] for a list of available output formats. If none is specified, [pandoc] is bypassed and the input format is chosen as output format. Passing "pandoc" will let [pandoc] decide based on the extension of the output file.
#+[additional pandoc options]: All remainining parameters will be directly passed to [pandoc]. If none are provided, -s is implicitly added as default.
#+returns: Sets a non-zero exit code and exits the script on errors. Output from [pandoc] and other calls may be printed. Otherwise nothing is returned.
#+@B_E
function b_cdoc_generate {
local fileList="$1"
local outFile="$2"
[ -e "$outFile" ] && B_ERR="The output file $outFile already exists." && B_E
local outFormat="$3"
[ -n "$outFormat" ] && b_deps "pandoc"
local internalAddOptions=""
[ $# -le 3 ] && internalAddOptions="-s"
local rawOut="$(mktemp)"
local blockOut="$(mktemp)"

#generate the final file list
fileList="$(b_fs_enumerate "$fileList")" || { B_ERR="Failed to enumerate the file list." ; B_E ; }

#call doc begin callback
${BLIB_STORE["BLIB_CDOC_DOCUMENT_BEGIN_CALLBACK"]} "$outFile" "$outFormat" >> "$rawOut" || { B_ERR="The document begin callback function ${BLIB_STORE["BLIB_CDOC_DOCUMENT_BEGIN_CALLBACK"]} returned an error." ; B_E ; }

#extract the documentation from the code / generate the raw doc
local fname=""
while IFS= read -r fname ; do
	local o=""

	#check the file callback
	${BLIB_STORE["BLIB_CDOC_FILE_CALLBACK"]} "$fname" "$outFormat" > /dev/null
	case "$?" in
		"0")
		#normal processing
		local line=""
		local block=""
		local lastMatched=1
		local blockCnt=0
		while IFS= read -r line || [ -n "$block" ] ; do
			if [[ "$line" =~ ${BLIB_STORE["BLIB_CDOC_EXTRACTION_REGEX"]} ]] ; then
				[ $lastMatched -eq 0 ] && block="$block"$'\n'"${BASH_REMATCH[1]}" || block="${BASH_REMATCH[1]}"
				lastMatched=0
				line=""
			else
				#write block, if necessary (end of block)
				if [ -n "$block" ] ; then
					#call block callback
					#NOTE: we do this in the current shell to support usage of global variables within the callback
					${BLIB_STORE["BLIB_CDOC_BLOCK_CALLBACK"]} "$block" $blockCnt "$fname" "$outFormat" > "$blockOut" || { B_ERR="The block callback function ${BLIB_STORE["BLIB_CDOC_BLOCK_CALLBACK"]} returned an error." ; B_E ; }
					#NOTE: the x stuff is just done in order to keep trailing newlines
					block="$(cat "$blockOut" ; echo x)" || { B_ERR="Failed to read from the block output for the file $fname." ; B_E ; }
					block="${block%x}"
					[ -n "$o" ] && o="${o}$block" || o="$block"
					block=""
					(( blockCnt ++ ))
				fi
				lastMatched=1
			fi
		done < "$fname" || { B_ERR="Failed to read the code file $fname." ; B_E ; }
		;;

		"1")
		#include as-is
		o="$(cat "$fname" ; echo x)" || { B_ERR="Failed to read ${fname}." ; B_E ; }
		o="${o%x}"
		;;

		"2")
		#ignore
		continue
		;;

		*)
		B_ERR="The ${BLIB_STORE["BLIB_CDOC_DOCUMENT_BEGIN_CALLBACK"]} requested an abnormal exit after seeing $fname."
		B_E
		;;
	esac

	#call post processing callback
	${BLIB_STORE["BLIB_CDOC_POST_PROCESSING_CALLBACK"]} "$o" "$fname" "$outFormat" >> "$rawOut" || { B_ERR="The post processing callback function ${BLIB_STORE["BLIB_CDOC_POST_PROCESSING_CALLBACK"]} returned an error." ; B_E ; }
done <<< "$fileList"

#cleanup
rm -f "$blockOut"

#call doc end callback
${BLIB_STORE["BLIB_CDOC_DOCUMENT_END_CALLBACK"]} "$outFile" "$outFormat" >> "$rawOut" || { B_ERR="The document end callback function ${BLIB_STORE["BLIB_CDOC_DOCUMENT_END_CALLBACK"]} returned an error." ; B_E ; }

#convert to output format if needed
if [ -n "$outFormat" ] ; then
	local formatParam=""
	[[ "$outFormat" != "pandoc" ]] && formatParam="-t $outFormat"
	
	#call pandoc
	pandoc "${@:4}" $internalAddOptions $formatParam -o "$outFile" "$rawOut" || { B_ERR="Errors detected during the pandoc conversion. Please review the pandoc output for details." ; B_E ; }

	#cleanup
	rm -f "$rawOut"
else
	#no conversion required --> move raw file to output
	mv -f "$rawOut" "$outFile" || { B_ERR="Failed to move the raw output in $rawOut to $outFile." ; B_E ; }
fi

return 0
}

#+b_cdoc_generateBlibStyle [input files] [output file] [output format] [delete existing]
#+A convenience wrapper for b_cdoc_generate which sets various reasonable parameters depending on the output format.
#+[input files]: see b_cdoc_generate
#+[output file]: where to write the generated output documentation to
#+[output format]: currently one of raw|html|pdf|man is supported (default: raw)
#+[delete existing]: whether or not to delete previously created output files (default: true/0); if set to false (1), the function will error out if a previously created file was found
#+returns: full path to the created documentation file on success; otherwise the function may error out
#+@B_E
function b_cdoc_generateBlibStyle {
local fileList="$1"
local cdocOutput="$2"
local outFormat="${3:-raw}"
local deleteExisting="${4:-0}"

local cdocAdditional=("-s" "--toc" "--toc-depth=3" "-f" "markdown+hard_line_breaks" "--section-divs")
local cdocOutFormat=

case "$outFormat" in
	raw)
	cdocOutFormat=""
	;;

	pdf)
	[[ "$cdocOutput" == *".pdf" ]] || { B_ERR="Currently only output files of format pdf with a pdf file ending are supported. So please adjust your file name." ; B_E ; }
	cdocOutFormat="pandoc"
	;;

	html)
	cdocOutFormat="html5"
	cdocAdditional+=("--self-contained")
	cdocAdditional+=("-c")
	cdocAdditional+=("${BLIB_STORE["BLIB_STATIC_DOC_DIR"]}/html5.css")
	;;

	man)
	cdocOutFormat="man"
	;;

	*)
	B_ERR="Invalid or unsupported format: $outFormat" ; B_E
	;;
esac

#remove a previous file if necessary
[ $deleteExisting -eq 0 ] && rm -f "$cdocOutput" &> /dev/null

#generate the doc
local out=""
out="$(b_cdoc_generate "$fileList" "$cdocOutput" "$cdocOutFormat" "${cdocAdditional[@]}")" || { B_ERR="Failed to generate the doc: $out" ; B_E ; }

#return
echo "$cdocOutput"
return 0
}

#+##### Callback Functions #####

#+b_cdoc_cbPrintNewline 
#+Prints a newline character.
#+returns: nothing
function b_cdoc_cbPrintNewline {
echo ""
}

#+b_cdoc_cbPrintFirstParam [param]
#+Prints the first parameter.
#+[param]: The parameter to print.
#+returns: the first parameter
function b_cdoc_cbPrintFirstParam {
echo "$1"
}
