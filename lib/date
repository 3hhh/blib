#!/bin/bash
#
#+Collection of date and time related functions.
#+
#+Copyright (C) 2018  David Hobach  LGPLv3
#+0.3

b_deps "date"

#BLIB_DATE_UNIT2SECSMULT
#Translates units to multiples of seconds.
declare -gA BLIB_DATE_UNIT2SECSMULT=(
	["s"]=1
	["m"]=60
	["h"]=3600
	["d"]=86400
	)

#+### Functions ###

#+b_date_add [date] [time] [unit] [format] [utc flag]
#+Add the given number of seconds to the given date.
#+[date]: date to add seconds to; the format must be understood by the Unix date utility
#+[time]: amount of time to add
#+[unit]: unit of the time to add, may be one of d (days), h (hours) m (minutes), s (seconds, default)
#+[format]: output format of the date, in Unix date notation (default: use the localized output)
#+[utc flag]: if set to 0, use UTC as time zone if not specified for the input _and_ use it for the output (default: 1 = local time zone)
#+returns: The input date with the given number of seconds added, in the requested format; returns a non-zero exit code on errors.
#+@B_E
function b_date_add {
local date="$1"
local toAdd="$2"
local unit="${3:-s}"
local format="$4"
[ -n "$format" ] && format="+$format"
local utcFlag="${5:-1}"
local addParams=""
[ $utcFlag -eq 0 ] && addParams="-u"
local unixResult=""

local mult="${BLIB_DATE_UNIT2SECSMULT["$unit"]}"
[ -z "$mult" ] && B_ERR="Invalid unit: $unit" && B_E

unixResult="$(date $addParams --date="$date" +%s)" || { B_ERR="Failed to parse the date $date." ; B_E }
unixResult=$(( $unixResult + $toAdd * $mult))
#use the exit code as return exit code:
if [ -n "$format" ] ; then
	date $addParams --date="@$unixResult" "$format"
else
	date $addParams --date="@$unixResult"
fi
}

#+b_date_addDays [date] [days] [format] [utc flag]
#+Convenience wrapper to [b_date_add](#b_date_add) with days.
#+[days]: number of days to add
function b_date_addDays {
local date="$1"
local days="$2"
local format="$3"
local utcFlag="$4"
b_date_add "$date" "$days" "d" "$format" "$utcFlag"
}

#+b_date_diff [date 1] [date 2] [unit]
#+Get the amount of time between the two dates, i.e. [date 2] - [date 1].
#+[date 2], \[date 1\]: the two dates to subtract; the time part is assumed to be identical if not specified within the dates
#+[unit]: unit of the result, may be one of d (days), h (hours) m (minutes), s (seconds, default)
#+returns: The amount of time between the given two dates \[date 2\] - \[date 1\], rounded down. Returns a non-zero exit code on errors.
#+@B_E
function b_date_diff {
local date1="$1"
local date2="$2"
local unit="${3:-s}"
local mult="${BLIB_DATE_UNIT2SECSMULT["$unit"]}"
[ -z "$mult" ] && B_ERR="Invalid unit: $unit" && B_E
local unix1=""
local unix2=""
unix1=$(date --date="$date1" +%s) || { B_ERR="Failed to parse the date $date1." ; B_E }
unix2=$(date --date="$date2" +%s) || { B_ERR="Failed to parse the date $date2." ; B_E }
echo $(( ( $unix2 - $unix1 ) / $mult ))
}

#+b_date_getFileModAge [file] [unit]
#+Get the time that passed since the last modification of the file.
#+[file]: Full path to the file to check.
#+[unit]: unit of the time to retrieve, may be one of d (days), h (hours) m (minutes), s (seconds, default)
#+returns: The amount of time in the given unit since the last modification. May be rounded down. Sets a non-zero exit code on errors.
#+@B_E
function b_date_getFileModAge {
local file="$1"
local unit="${2:-s}"
local mult="${BLIB_DATE_UNIT2SECSMULT["$unit"]}"
[ -z "$mult" ] && B_ERR="Invalid unit: $unit" && B_E

local now=
printf -v now '%(%s)T' -1
local lastAccess=""
lastAccess="$(date -r "$file" +%s)" || { B_ERR="Failed to read the timestamps of the file $file. Maybe it doesn't exist?" ; B_E }
local ret=$(( ( $now - $lastAccess ) / $mult ))
echo "$ret"
}
