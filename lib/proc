#!/bin/bash
#
#+Collection of process and thread related functions.
#+
#+Copyright (C) 2020  David Hobach  LGPLv3
#+0.2

b_deps "tail" "timeout" "kill" "killall"

#+### Functions ###

#+b_proc_pidExists [pid]
#+Check whether the given process ID exists on the system.
#+[pid]: process ID to check for existence (process exists)
#+returns: A zero exit code, if it exists and a non-zero exit code if it doesn't; this function attempts to check the existence of the given process across _all_ users, but it cannot guarantee correctness if the user running this script has very low privileges.
function b_proc_pidExists {
#NOTE: kill -0 tends to fail with insufficient privileges, ps -p is rather platform specific --> use /proc/
local pid="$1"
[ -n "$pid" ] && [ -d "/proc/$pid" ]
}

#+b_proc_childExists [pid]
#+Check whether the given process ID exists _and_ is a _direct_ child of the calling bash process.
#+[pid]: process ID to check
#+returns: A zero exit code, if the caller is a parent of the given pid.
function b_proc_childExists {
local pid="$1"
#NOTE: jobs -p turned out not to be absolutely reliable in practice (sometimes still has long dead jobs) so we double check with b_proc_pidExists
b_listContains "$(jobs -p)" "$pid" && b_proc_pidExists "$pid"
}

#+b_proc_waitForPid [pid] [maximum time]
#+Wait for the given process to exit. If it doesn't exist, exit immediately.
#+[pid]: Process ID of the process to wait for.
#+[maximum time]: Maximum time in seconds to wait for the process to exit (default: 0 = indefinitely).
#+returns: Nothing, always sets a zero exit code. Use [b_proc_pidExists](#b_proc_pidExists) if you need to know whether the process finished.
function b_proc_waitForPid {
local pid="$1"
local maxTime="${2:-0}"

#tail does the trick on all Linux systems, polling kill -0 doesn't
local cmd="tail -f /dev/null --pid $pid"
[ $maxTime -gt 0 ] && cmd="timeout $maxTime $cmd"

$cmd &> /dev/null
return 0
}

#+b_proc_resolveSignal [signal]
#+Resolve process (kill) signal names to their numeric identifiers.
#+[signal]: Signal name (string) or numeric identifier.
#+returns: The numeric identifier corresponding to the given signal.
#+@B_E
function b_proc_resolveSignal {
local signal="$1"
[ -z "$signal" ] && B_ERR="No signal specified." && B_E

local re='^[0-9]+$'
if [[ ! $signal =~ $re ]] ; then
	signal="$(kill -l "$signal")" || { B_ERR="Failed to resolve the signal $signal." ; B_E }
fi
echo "$signal"
}

#+b_proc_killAndWait [pid] [signal] [timeout]
#+Send a kill/exit signal to a process and wait for it to terminate.
#+[pid]: Process ID of the process to wait to terminate.
#+[signal]: Signal name (string) or numeric identifier to send (default: SIGTERM).
#+[timeout]: Time in seconds after which to send a SIGKILL if the process doesn't terminate (default: 0 = wait forever).
#+returns: A zero exit code, if the process terminated without timeout or could not be found.
#+@B_E
function b_proc_killAndWait {
local pid="$1"
local signal="$2"
local timeout="${3:-0}"

if [ -n "$signal" ] ; then
	signal="$(b_proc_resolveSignal "$signal")" || { B_ERR="Failed to resolve the signal $signal." ; B_E }
	local cmd="kill -s $signal $pid"
else
	local cmd="kill $pid"
fi

$cmd &> /dev/null
b_proc_waitForPid "$pid" "$timeout"

if b_proc_pidExists "$pid" ; then
	kill -9 "$pid"
	b_proc_waitForPid "$pid"
	return 1
fi

return 0
}

#+b_proc_killByRegexAndWait [regex] [signal] [timeout]
#+Kill/Terminate all matching processes.
#+[regex]: Regular expression matched against running process names. Matching processes will be terminated.
#+[signal]: Signal name (string) or numeric identifier to send (default: SIGTERM).
#+[timeout]: Time in seconds after which to send a SIGKILL if the processes don't terminate (default: 0 = wait forever).
#+returns: A zero exit code, if the process terminated without timeout or could not be found.
#+@B_E
function b_proc_killByRegexAndWait {
local regex="$1"
local signal="${2:-"SIGTERM"}"
local timeout="${3:-0}"

signal="$(b_proc_resolveSignal "$signal")" || { B_ERR="Failed to resolve the signal $signal." ; B_E }

local cmd=
printf -v cmd 'killall -s %q -wr %q' "$signal" "$regex"
[ $timeout -gt 0 ] && cmd="timeout $timeout $cmd"

local ret=
local out=
out="$(eval "$cmd" 2>&1)"
ret=$?

#killall -9 on timeout
[ $timeout -gt 0 ] && [ $ret -eq 124 ] && killall -9 -wr "$regex"

#special case: killall returns a non-zero exit code, if a process wasn't found --> we don't
[ $ret -ne 0 ] && [[ "$out" == *"no process found"* ]] && ret=0

return $ret
}
