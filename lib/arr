#!/bin/bash
#
#+Collection of array related functions.
#+
#+Copyright (C) 2018  David Hobach  LGPLv3
#+0.2

#+### Functions ###

#+b_arr_join [delimiter] [array]
#+Join the given array; elements are separated with the given delimiter. The array is not checked to exist.
#+[delimiter]: String to use as delimiter.
#+[array]: Expanded array to join, e.g. "${arr\[@\]}".
#+returns: Joined version of the array. The exit code is always zero.
function b_arr_join {
local d="$1"
shift
echo -n "$1"
shift
printf "%s" "${@/#/"$d"}"
return 0
}

#+b_arr_toList [array]
#+Create a newline-separated list from the given array.
#+[array]: Expanded array to join, e.g. "${arr\[@\]}".
#+returns: List version of the array. The exit code is always zero.
function b_arr_toList {
b_arr_join $'\n' "$@"
}

#+b_arr_contains [element] [array]
#+Check whether an array contains an element.
#+[element]: element to check for its existence in the array
#+[array]: expanded array to check, e.g. "${arr\[@\]}"
#+returns: an exit code of 0, if the element was found and 1 otherwise
function b_arr_contains {
local e=
for e in "${@:2}"; do [ "$e" == "$1" ] && return 0; done
return 1
}

#+b_arr_mapsAreEqual [map spec 1] [map spec 2]
#+Check whether the two given maps/associative arrays are equal.
#+[map spec 1]: First map specification to check. Since maps cannot be passed directly to functions in Bash 4.2, you'll have to use `"$(declare -p "yourmap")"` instead.
#+[map spec 1]: Second map specification to check.
#+returns: an exit code of 0, if the maps are equal and 1 otherwise; [B_E](#B_E) is only triggered on programming errors
#+@B_E
function b_arr_mapsAreEqual {
local spec1="$1"
local spec2="$2"

if [[ "$spec1" != "declare -A"* ]] || [[ "$spec2" != "declare -A"* ]] ; then
	B_ERR="Invalid call to b_arr_mapAreEqual. Maybe your forgot to pass the parameters indirectly?"
	B_E
fi

#assign specs to local variables
#special case: empty map which might not have an equal sign in its declaration
[[ $spec1 == *"="* ]] && spec1="declare -A arr1=${spec1#*=}" || spec1="declare -A arr1"
[[ $spec2 == *"="* ]] && spec2="declare -A arr2=${spec2#*=}" || spec2="declare -A arr2"
eval "$spec1" || { B_ERR="First eval failed." ; B_E }
eval "$spec2" || { B_ERR="Second eval failed." ; B_E }

#compare
[ ${#arr1[@]} -ne ${#arr2[@]} ] && return 1
local key=
for key in "${!arr1[@]}" ; do
	if [ ${arr2["$key"]+exists} ] ; then
		[[ "${arr1["$key"]}" == "${arr2["$key"]}" ]] || return 1
	else
		return 1
	fi
done

return 0
}
